diff --git a/brcm_patchram_plus/Android.mk b/brcm_patchram_plus/Android.mk
index 3f4e8c7..8deb845 100644
--- a/brcm_patchram_plus/Android.mk
+++ b/brcm_patchram_plus/Android.mk
@@ -1,5 +1,9 @@
 ifeq ($(BOARD_HAVE_BLUETOOTH_BCM),true)
 
+ifdef TARGET_IS_GALAXYS
+  LOCAL_CFLAGS += -DTARGET_IS_GALAXYS
+endif
+
 LOCAL_PATH:= $(call my-dir)
 
 #
diff --git a/brcm_patchram_plus/brcm_patchram_plus.c b/brcm_patchram_plus/brcm_patchram_plus.c
index c91a13f..0ba8244 100644
--- a/brcm_patchram_plus/brcm_patchram_plus.c
+++ b/brcm_patchram_plus/brcm_patchram_plus.c
@@ -88,8 +88,11 @@
 #define HCI_UART_BCSP	1
 #define HCI_UART_3WIRE	2
 #define HCI_UART_H4DS	3
-#define HCI_UART_LL		4
+#define HCI_UART_LL	    4
 
+#ifdef TARGET_IS_GALAXYS
+#define RFKILL_WAIT 200000
+#endif
 
 int uart_fd = -1;
 int hcdfile_fd = -1;
@@ -112,9 +115,17 @@ unsigned char hci_update_baud_rate[] = { 0x01, 0x18, 0xfc, 0x06, 0x00, 0x00,
 unsigned char hci_write_bd_addr[] = { 0x01, 0x01, 0xfc, 0x06, 
 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 
+#ifdef TARGET_IS_GALAXYS
+//Broadcom Bluetooth Feature
+unsigned char hci_write_sleep_mode[] = { 0x01, 0x27, 0xfc, 0x0c,
+        0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
+        0x00, 0x00 };
+#else
+// Google Code, Broadcom Bluetooth Feature
 unsigned char hci_write_sleep_mode[] = { 0x01, 0x27, 0xfc, 0x0c, 
 	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
 	0x00, 0x00 };
+#endif
 
 int
 parse_patchram(char *optarg)
@@ -319,7 +330,42 @@ parse_cmd_line(int argc, char **argv)
 	return(0);
 }
 
-void
+#ifdef TARGET_IS_GALAXYS
+void 
+reset_bt()
+    {
+	int btfd;
+	char *rfkill = "/sys/class/rfkill/rfkill0/state";
+	char *disable = "0";
+	char *enable = "1";
+	struct timespec req = {0};
+
+	req.tv_sec = 0;
+	req.tv_nsec = RFKILL_WAIT * 1000L;
+
+	btfd = fopen(rfkill, "w");
+	if (btfd == 0 ) {
+		fprintf(stderr, "open(%s) failed: %s (%d)", rfkill, strerror(errno),
+				errno);
+		return;
+	}
+	fputs(disable, btfd);
+	fclose(btfd);
+	nanosleep(&req, (struct timespec *)NULL);
+
+	btfd = fopen(rfkill, "w");
+	if (btfd == 0 ) {
+		fprintf(stderr, "open(%s) failed: %s (%d)", rfkill, strerror(errno),
+				errno);
+		return;
+	}
+	fputs(enable, btfd);
+	fclose(btfd);
+	nanosleep(&req, (struct timespec *)NULL);
+}
+#endif
+
+void 
 init_uart()
 {
 	tcflush(uart_fd, TCIOFLUSH);
@@ -435,7 +481,9 @@ proc_patchram()
 
 	read(uart_fd, &buffer[0], 2);
 
-	usleep(50000);
+#ifndef TARGET_IS_GALAXYS
+        usleep(50000);
+#endif
 
 	while (read(hcdfile_fd, &buffer[1], 3)) {
 		buffer[0] = 0x01;
@@ -489,6 +537,9 @@ proc_enable_hci()
 {
 	int i = N_HCI;
 	int proto = HCI_UART_H4;
+	if (enable_lpm) {
+		proto = HCI_UART_LL;
+	}
 	if (ioctl(uart_fd, TIOCSETD, &i) < 0) {
 		fprintf(stderr, "Can't set line discipline\n");
 		return;
@@ -548,6 +599,10 @@ main (int argc, char **argv)
 		exit(1);
 	}
 
+#ifdef TARGET_IS_GALAXYS
+        reset_bt();
+#endif
+
 	init_uart();
 
 	proc_reset();
