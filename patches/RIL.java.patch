--- RIL.java.org	2011-04-20 22:53:56.906738002 -0700
+++ RIL.java	2011-04-20 23:05:22.353738002 -0700
@@ -1400,8 +1400,16 @@
         RILRequest rr
                 = RILRequest.obtain(RIL_REQUEST_RADIO_POWER, result);
 
-        rr.mp.writeInt(1);
-        rr.mp.writeInt(on ? 1 : 0);
+        //samsung crap for airplane mode
+        if (on)
+        {
+ 	        rr.mp.writeInt(1);
+ 	        rr.mp.writeInt(1);
+        } else {
+ 	        rr.mp.writeInt(2);
+	        rr.mp.writeInt(0);
+            rr.mp.writeInt(0);
+        }
 
         if (RILJ_LOGD) riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
 
@@ -2311,9 +2319,27 @@
         }
 
         if (error != 0) {
-            rr.onError(error, ret);
-            rr.release();
-            return;
+            if (!(error == -1 && rr.mRequest == RIL_REQUEST_SEND_SMS)) //ugly fix for Samsung messing up SMS_SEND request fail in binary RIL
+            {
+                rr.onError(error, ret);
+                rr.release();
+                return;
+            }
+            else
+            {
+                try 
+                {
+                    ret =  responseSMS(p);
+                } catch (Throwable tr) {
+                    Log.w(LOG_TAG, rr.serialString() + "< "
+                        + requestToString(rr.mRequest)
+                        + " exception, Processing Samsung SMS fix ", tr);
+
+                    rr.onError(error, ret);
+                    rr.release();
+                    return;
+                }
+            }
         }
 
         if (RILJ_LOGD) riljLog(rr.serialString() + "< " + requestToString(rr.mRequest)
@@ -2432,6 +2458,17 @@
             case RIL_UNSOL_OEM_HOOK_RAW: ret = responseRaw(p); break;
             case RIL_UNSOL_RINGBACK_TONE: ret = responseInts(p); break;
             case RIL_UNSOL_RESEND_INCALL_MUTE: ret = responseVoid(p); break;
+            case RIL_UNSOL_HSDPA_STATE_CHANGED: ret = responseVoid(p); break;
+            
+
+            //fixing anoying Exceptions caused by the new Samsung states
+            //FIXME figure out what the states mean an what data is in the parcel
+
+            case RIL_UNSOL_O2_HOME_ZONE_INFO: ret = responseVoid(p); break;
+            case RIL_UNSOL_SAMSUNG_UNKNOWN_MAGIC_REQUEST: ret = responseVoid(p); break;
+            case RIL_UNSOL_STK_SEND_SMS_RESULT: ret = responseVoid(p); break;
+            case RIL_UNSOL_DEVICE_READY_NOTI: ret = responseVoid(p); break;
+            case RIL_UNSOL_SAMSUNG_UNKNOWN_MAGIC_REQUEST_2: ret = responseVoid(p); break;
 
             default:
                 throw new RuntimeException("Unrecognized unsol response: " + response);
@@ -2456,6 +2493,13 @@
                 mCallStateRegistrants
                     .notifyRegistrants(new AsyncResult(null, null, null));
             break;
+            case RIL_UNSOL_HSDPA_STATE_CHANGED:
+                if (RILJ_LOGD) unsljLog(response);
+
+                mNetworkStateRegistrants
+                    .notifyRegistrants(new AsyncResult(null, null, null));
+            break;
+
             case RIL_UNSOL_RESPONSE_NETWORK_STATE_CHANGED:
                 if (RILJ_LOGD) unsljLog(response);
 
@@ -2749,7 +2793,16 @@
         for (int i = 0 ; i < numInts ; i++) {
             response[i] = p.readInt();
         }
-
+         /* Matching Samsung signal strength to asu.
+             Method taken from Samsungs cdma/gsmSignalStateTracker */
+        response[0] = response[0] & 0xFF; //gsmDbm
+        response[1] = -1; //gsmEcio  
+        response[2] = (response[2] < 0)?-120:-response[2]; //cdmaDbm
+        response[3] = (response[3] < 0)?-160:-response[3]; //cdmaEcio
+        response[4] = (response[4] < 0)?-120:-response[4]; //evdoRssi
+        response[5] = (response[5] < 0)?-1:-response[5]; //evdoEcio
+        if(response[6] < 0 || response[6] > 8)
+            response[6] = -1;
         return response;
     }
 
@@ -2914,6 +2967,43 @@
         ArrayList<DriverCall> response;
         DriverCall dc;
 
+        int dataAvail = p.dataAvail();
+        int pos = p.dataPosition();
+        int size = p.dataSize();
+	
+        Log.d(LOG_TAG, "Parcel size = " + size);
+        Log.d(LOG_TAG, "Parcel pos = " + pos);
+        Log.d(LOG_TAG, "Parcel dataAvail = " + dataAvail);
+        //Samsung fucked up here
+
+        /*
+        // Native package assembly in the aosp rild
+
+        p.writeInt32(p_cur->state);
+        p.writeInt32(p_cur->index);
+        p.writeInt32(p_cur->toa);
+        p.writeInt32(p_cur->isMpty);
+        p.writeInt32(p_cur->isMT);
+        p.writeInt32(p_cur->als);
+        p.writeInt32(p_cur->isVoice);
+        p.writeInt32(p_cur->isVoicePrivacy);
+        writeStringToParcel(p, p_cur->number);
+        p.writeInt32(p_cur->numberPresentation);
+        writeStringToParcel(p, p_cur->name);
+        p.writeInt32(p_cur->namePresentation);
+        Remove when partners upgrade to version 3
+        if ((s_callbacks.version < 3) || (p_cur->uusInfo == NULL || p_cur->uusInfo->uusData == NULL)) {
+            p.writeInt32(0);  UUS Information is absent 
+        } else {
+            RIL_UUS_Info *uusInfo = p_cur->uusInfo;
+            p.writeInt32(1);  UUS Information is present 
+            p.writeInt32(uusInfo->uusType);
+            p.writeInt3s2(uusInfo->uusDcs);
+            p.writeInt32(uusInfo->uusLength);
+            p.write(uusInfo->uusData, uusInfo->uusLength);
+        }
+        */
+
         num = p.readInt();
         response = new ArrayList<DriverCall>(num);
 
@@ -2928,7 +3018,8 @@
             dc.als = p.readInt();
             voiceSettings = p.readInt();
             dc.isVoice = (0 == voiceSettings) ? false : true;
-            dc.isVoicePrivacy = (0 != p.readInt());
+            dc.isVoicePrivacy =  (0 != p.readInt()); 
+            int videoStuff = p.readInt(); // Some Samsung magic data for Videocalls
             dc.number = p.readString();
             int np = p.readInt();
             dc.numberPresentation = DriverCall.presentationFromCLIP(np);
@@ -3134,6 +3225,17 @@
             response[i] = p.readInt();
         }
 
+        /* Matching Samsung signal strength to asu.
+           Method taken from Samsungs cdma/gsmSignalStateTracker */
+        response[0] = response[0] & 0xFF; //gsmDbm
+        response[1] = -1; //gsmEcio	
+        response[2] = (response[2] < 0)?-120:-response[2]; //cdmaDbm
+        response[3] = (response[3] < 0)?-160:-response[3]; //cdmaEcio
+        response[4] = (response[4] < 0)?-120:-response[4]; //evdoRssi
+        response[5] = (response[5] < 0)?-1:-response[5]; //evdoEcio
+        if(response[6] < 0 || response[6] > 8)
+            response[6] = -1;
+
         return response;
     }
 
